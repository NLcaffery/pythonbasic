在工作中，不同公司都有自己的单元测试工具
本章学习的是unittest，是Python自带的

一.书写规范
    1. 文件名字命名：文件名不能写中文，不能写unittest，不能直接写testcase
    2. 步骤
        1.导包import unittest
        2.继承unittest.TestCase
        class Add(unittest.TestCase)
        def test_1(self):
        pass
    3. 方法名称必须以test字母开头

二.测试用例
    1. 当测试多个用例时，光标在哪里测试那个用例；当光标在最上面，测试多个用例
       同时测试多个示例时，多个示例会相互影响，存在执行顺序
       执行顺序按照名称ASCII码来执行
       所以要对testcase命名按照数字顺序
       eg
       test_001_add_stu_require
       test_002_add_stu_not_require
       test_003_add_stu_no_already

    2. 说明：Fixture是一个概述，对一个测试用例环境的初始化和销毁就是一个Fixture

       部分业务做测试，会要求有前提条件
       比如，修改学院信息，要求用户信息本身存在，才可以修改信息
       2.1所以在该类下所有用例开始执行前先准备数据，这叫做前置处理，并且还是一个类级别的前置处理

           def setUpClass(cls) -> None:#固定的名字，准备数据，类前置
                print('当前类下所有用例开始执行前，先执行我')
                StusOperate.add_stu(no='200',name='沙陌')


       通常有可能在测试完成后，我们需要去清除自己的临时数据
       在所有用例执行完之后去做，这叫做后置处理，并且还是一个类级别的后置处理

           def tearDownClass(cls) -> None:#固定名称，类后置
                print('当前类下所有用例执行完成后，才执行我')
                StusOperate.delete_stu(no='200')

       类级别的前置和后置，在当前类下都只会执行一次，不管你有多少条用例

       2.2 如果想在每条用例的执行开始前后，都执行，被称为方法（用例）级别的前置和后置
            def setUp(self) -> None:
                print('用例开始执行啦')
            def tearDown(self) -> None:
                print('用例执行结束啦')

三. ddt驱动测试
数据驱动测试，也可以被叫做参数化，数据有多少组，测试用例就执行多少遍
    pip install ddt
3.1准备数据
 test_data = [
        ['修改用户姓名',{"no":"200","name":"张三三"},'修改成功'],
        ['修改phone', {"no": "200", "phone": "18729399607"}, '修改成功'],
        ['修改wx', {"no": "200", "wx": "wx001"}, '修改成功'],
        ['修改qq', {"no": "200", "qq": "qq001"}, '修改成功'],
        ['修改score', {"no": "200", "score": 80}, '修改成功'],
        ['全部修改', {"no": "200","name": "张三四","phone": "18729399608","wx": "wx002","qq": "qq002","score": 81}, '修改成功']

    ]
3.2传入数据
@ddt.data(*test_data)#*表示拆
def test_change_info(self,data):#每一组数据用data接收
    pass
四. 可视化工具